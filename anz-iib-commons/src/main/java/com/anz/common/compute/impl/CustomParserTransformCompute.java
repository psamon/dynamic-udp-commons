/**
 * 
 */
package com.anz.common.compute.impl;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;

import com.anz.common.compute.IParser;
import com.anz.common.transform.ITransformer;
import com.ibm.broker.plugin.MbException;
import com.ibm.broker.plugin.MbMessage;
import com.ibm.broker.plugin.MbMessageAssembly;
import com.ibm.broker.plugin.MbUserException;

public abstract class CustomParserTransformCompute<I, O> extends CommonJavaCompute {

	protected static JAXBContext jaxbContext = null;

	@Override
	public void onInitialize() throws MbException {
		super.onInitialize();
		try {
			// Initialize JAXB context with com.anz.cobolTransform.compute
			// Java object classes that were generated by a Java Architecture
			// for XML
			// Binding (JAXB) binding compiler
			jaxbContext = JAXBContext
					.newInstance("com.anz.cobolTransform.transform.pojo");
		} catch (JAXBException e) {
			// This exception will cause the deploy of this Java compute node to
			// fail
			// Typical cause is the JAXB package above is not available
			throw new MbUserException(this, "onInitialize()", "", "",
					e.toString(), null);
		}
	}


	@Override
	public void execute(MbMessageAssembly inAssembly,
			MbMessageAssembly outAssembly) throws Exception {

		MbMessage inMessage = inAssembly.getMessage();
		MbMessage outMessage = outAssembly.getMessage();


		IParser<I> inputParser = getInputParser();
		I inputObject = inputParser.readInputMessage(jaxbContext, outMessage);
		inputParser.removeMessageBody(outMessage);

		ITransformer<I, O> transformer = getTransformer();
		O ouputObject = transformer.execute(inputObject, appLogger, metaData);

		IParser<O> outputParser = getOutputParser();
		outputParser.setOutputMessage(jaxbContext, outMessage, ouputObject);

	}

	public abstract IParser<I> getInputParser();

	public abstract IParser<O> getOutputParser();

	/**
	 * Get the external transformer class instance
	 * 
	 * @return Transformer class
	 */
	public abstract ITransformer<I, O> getTransformer();

}
